package evchargingstore.test;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultHandler;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import com.fasterxml.jackson.databind.ObjectMapper;

import evchargingstore.controller.ChargingSessionController;
import evchargingstore.entity.ChargingSessionInfo;
import evchargingstore.entity.ChargingSessionResponse;
import evchargingstore.facade.ChargingSessionServiceFacade;
import evchargingstore.util.CustomDateFormatUtil;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import java.io.UnsupportedEncodingException;

@RunWith(SpringRunner.class)
@WebMvcTest(ChargingSessionController.class)
public class ChargingSessionControllerMock {

	@Autowired
	private ObjectMapper objectMapper;

	@Autowired
	private MockMvc mvc;

	@MockBean
	private ChargingSessionServiceFacade facade;

	@Test
	public void testSubmitChargingSession() throws UnsupportedEncodingException, Exception {
		ChargingSessionInfo info = new ChargingSessionInfo();
		info.setStartedAt(CustomDateFormatUtil.format("2019-05-06T19:00:20.529"));
		ChargingSessionResponse expectedResponse = new ChargingSessionResponse(info);
		
		String jsonBody = objectMapper.writeValueAsString(info);
		Mockito.when(facade.submitChargingSession(info)).thenReturn(expectedResponse);
		mvc.perform(post("/chargingSessions").contentType(MediaType.APPLICATION_JSON).content(jsonBody)
				.characterEncoding("utf-8")).andExpect(status().isOk())
				.andExpect(content().json(objectMapper.writeValueAsString(expectedResponse)));

	}
}
